/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Rivet } from "../../../../../..";
export declare namespace Lobbies {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Lobbies {
    private readonly options;
    constructor(options: Lobbies.Options);
    /**
     * Marks the current lobby as ready to accept connections.  Players will not be able to connect to this lobby until the  lobby is flagged as ready.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    ready(): Promise<void>;
    /**
     * If `is_closed` is `true`, the matchmaker will no longer route players to the lobby. Players can still
     * join using the /join endpoint (this can be disabled by the developer by rejecting all new connections
     * after setting the lobby to closed).
     * Does not shutdown the lobby.
     *
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    setClosed(request: Rivet.matchmaker.SetLobbyClosedRequest): Promise<void>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    setState(request?: unknown): Promise<void>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getState(lobbyId: string): Promise<unknown | undefined>;
    /**
     * Finds a lobby based on the given criteria.
     * If a lobby is not found and `prevent_auto_create_lobby` is `true`,
     * a new lobby will be created.
     *
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    find(request: Rivet.matchmaker.FindLobbyRequest): Promise<Rivet.matchmaker.FindLobbyResponse>;
    /**
     * Joins a specific lobby.
     * This request will use the direct player count configured for the
     * lobby group.
     *
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    join(request: Rivet.matchmaker.JoinLobbyRequest): Promise<Rivet.matchmaker.JoinLobbyResponse>;
    /**
     * Creates a custom lobby.
     *
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    create(request: Rivet.matchmaker.CreateLobbyRequest): Promise<Rivet.matchmaker.CreateLobbyResponse>;
    /**
     * Lists all open lobbies.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    list(request?: Rivet.matchmaker.ListLobbiesRequest): Promise<Rivet.matchmaker.ListLobbiesResponse>;
    private _getAuthorizationHeader;
}
