/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import { Rivet } from "../../../../../../../..";
export declare namespace Games {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Games {
    private readonly options;
    constructor(options: Games.Options);
    /**
     * Returns a list of games in which the current identity is a group member of its development team.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getGames(request?: Rivet.cloud.games.GetGamesRequest): Promise<Rivet.cloud.games.GetGamesResponse>;
    /**
     * Creates a new game.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createGame(request: Rivet.cloud.games.CreateGameRequest): Promise<Rivet.cloud.games.CreateGameResponse>;
    /**
     * Validates information used to create a new game.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateGame(request: Rivet.cloud.games.ValidateGameRequest): Promise<Rivet.cloud.games.ValidateGameResponse>;
    /**
     * Returns a game by its game id.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getGameById(gameId: string, request?: Rivet.cloud.games.GetGameByIdRequest): Promise<Rivet.cloud.games.GetGameByIdResponse>;
    /**
     * Prepares a game banner image upload.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    gameBannerUploadPrepare(gameId: string, request: Rivet.cloud.games.GameBannerUploadPrepareRequest): Promise<Rivet.cloud.games.GameBannerUploadPrepareResponse>;
    /**
     * Completes an game banner image upload. Must be called after the file upload process completes.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    gameBannerUploadComplete(gameId: string, uploadId: string): Promise<void>;
    /**
     * Prepares a game logo image upload.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    gameLogoUploadPrepare(gameId: string, request: Rivet.cloud.games.GameLogoUploadPrepareRequest): Promise<Rivet.cloud.games.GameLogoUploadPrepareResponse>;
    /**
     * Completes a game logo image upload. Must be called after the file upload process completes.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    gameLogoUploadComplete(gameId: string, uploadId: string): Promise<void>;
    private _getAuthorizationHeader;
}
