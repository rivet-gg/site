/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import { Rivet } from "../../../../../../../..";
export declare namespace Builds {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Builds {
    private readonly options;
    constructor(options: Builds.Options);
    /**
     * Lists game builds for the given game.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listGameBuilds(gameId: string): Promise<Rivet.cloud.games.ListGameBuildsResponse>;
    /**
     * Creates a new game build for the given game.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createGameBuild(gameId: string, request: Rivet.cloud.games.CreateGameBuildRequest): Promise<Rivet.cloud.games.CreateGameBuildResponse>;
    private _getAuthorizationHeader;
}
