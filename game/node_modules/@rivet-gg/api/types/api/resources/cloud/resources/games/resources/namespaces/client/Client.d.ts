/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import { Rivet } from "../../../../../../../..";
import { Analytics } from "../resources/analytics/client/Client";
import { Logs } from "../resources/logs/client/Client";
export declare namespace Namespaces {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Namespaces {
    private readonly options;
    constructor(options: Namespaces.Options);
    /**
     * Creates a new namespace for the given game.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createGameNamespace(gameId: string, request: Rivet.cloud.games.namespaces.CreateGameNamespaceRequest): Promise<Rivet.cloud.games.namespaces.CreateGameNamespaceResponse>;
    /**
     * Validates information used to create a new game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateGameNamespace(gameId: string, request: Rivet.cloud.games.namespaces.ValidateGameNamespaceRequest): Promise<Rivet.cloud.games.namespaces.ValidateGameNamespaceResponse>;
    /**
     * Gets a game namespace by namespace ID.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getGameNamespaceById(gameId: string, namespaceId: string): Promise<Rivet.cloud.games.namespaces.GetGameNamespaceByIdResponse>;
    /**
     * Adds an authenticated user to the given game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    updateNamespaceCdnAuthUser(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.UpdateNamespaceCdnAuthUserRequest): Promise<void>;
    /**
     * Removes an authenticated user from the given game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    removeNamespaceCdnAuthUser(gameId: string, namespaceId: string, user: string): Promise<void>;
    /**
     * Updates the CDN authentication type of the given game namesapce.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    setNamespaceCdnAuthType(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.SetNamespaceCdnAuthTypeRequest): Promise<void>;
    /**
     * Toggles whether or not to allow authentication based on domain for the given game namesapce.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    toggleNamespaceDomainPublicAuth(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.ToggleNamespaceDomainPublicAuthRequest): Promise<void>;
    /**
     * Adds a domain to the given game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    addNamespaceDomain(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.AddNamespaceDomainRequest): Promise<void>;
    /**
     * Removes a domain from the given game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    removeNamespaceDomain(gameId: string, namespaceId: string, domain: string): Promise<void>;
    /**
     * Updates matchmaker config for the given game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    updateGameNamespaceMatchmakerConfig(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.UpdateGameNamespaceMatchmakerConfigRequest): Promise<void>;
    /**
     * Gets the version history for a given namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getGameNamespaceVersionHistoryList(gameId: string, namespaceId: string, request?: Rivet.cloud.games.namespaces.GetGameNamespaceVersionHistoryRequest): Promise<Rivet.cloud.games.namespaces.GetGameNamespaceVersionHistoryResponse>;
    /**
     * Validates information used to update a game namespace's matchmaker config.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateGameNamespaceMatchmakerConfig(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigRequest): Promise<Rivet.cloud.games.namespaces.ValidateGameNamespaceMatchmakerConfigResponse>;
    /**
     * Creates a development token for the given namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createGameNamespaceTokenDevelopment(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentRequest): Promise<Rivet.cloud.games.namespaces.CreateGameNamespaceTokenDevelopmentResponse>;
    /**
     * Validates information used to create a new game namespace development token.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateGameNamespaceTokenDevelopment(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentRequest): Promise<Rivet.cloud.games.namespaces.ValidateGameNamespaceTokenDevelopmentResponse>;
    /**
     * Creates a public token for the given namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createGameNamespaceTokenPublic(gameId: string, namespaceId: string): Promise<Rivet.cloud.games.namespaces.CreateGameNamespaceTokenPublicResponse>;
    /**
     * Updates the version of a game namespace.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    updateGameNamespaceVersion(gameId: string, namespaceId: string, request: Rivet.cloud.games.namespaces.UpdateGameNamespaceVersionRequest): Promise<void>;
    private _analytics;
    get analytics(): Analytics;
    private _logs;
    get logs(): Logs;
    private _getAuthorizationHeader;
}
