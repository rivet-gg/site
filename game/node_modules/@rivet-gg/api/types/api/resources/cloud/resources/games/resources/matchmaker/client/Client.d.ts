/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import { Rivet } from "../../../../../../../..";
export declare namespace Matchmaker {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Matchmaker {
    private readonly options;
    constructor(options: Matchmaker.Options);
    /**
     * Exports lobby history over a given query time span.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    exportMatchmakerLobbyHistory(gameId: string, request: Rivet.cloud.games.ExportMatchmakerLobbyHistoryRequest): Promise<Rivet.cloud.games.ExportMatchmakerLobbyHistoryResponse>;
    /**
     * Deletes a matchmaker lobby, stopping it immediately.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    deleteMatchmakerLobby(gameId: string, lobbyId: string): Promise<Rivet.cloud.games.DeleteMatchmakerLobbyResponse>;
    /**
     * Returns the logs for a given lobby.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getLobbyLogs(gameId: string, lobbyId: string, request: Rivet.cloud.games.GetLobbyLogsRequest): Promise<Rivet.cloud.games.GetLobbyLogsResponse>;
    /**
     * Generates a download URL for logs.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    exportLobbyLogs(gameId: string, lobbyId: string, request: Rivet.cloud.games.ExportLobbyLogsRequest): Promise<Rivet.cloud.games.ExportLobbyLogsResponse>;
    private _getAuthorizationHeader;
}
