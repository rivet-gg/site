/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import { Rivet } from "../../../../../../../..";
export declare namespace Versions {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Versions {
    private readonly options;
    constructor(options: Versions.Options);
    /**
     * Creates a new game version.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createGameVersion(gameId: string, request: Rivet.cloud.games.CreateGameVersionRequest): Promise<Rivet.cloud.games.CreateGameVersionResponse>;
    /**
     * Validates information used to create a new game version.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateGameVersion(gameId: string, request: Rivet.cloud.games.ValidateGameVersionRequest): Promise<Rivet.cloud.games.ValidateGameVersionResponse>;
    /**
     * Returns a game version by its version ID.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getGameVersionById(gameId: string, versionId: string): Promise<Rivet.cloud.games.GetGameVersionByIdResponse>;
    private _getAuthorizationHeader;
}
