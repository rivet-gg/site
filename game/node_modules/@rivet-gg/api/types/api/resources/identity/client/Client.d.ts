/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Rivet } from "../../../..";
import { Events } from "../resources/events/client/Client";
import { Links } from "../resources/links/client/Client";
export declare namespace Identity {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Identity {
    private readonly options;
    constructor(options: Identity.Options);
    /**
     * Gets or creates an identity.
     * Passing an existing identity token in the body refreshes the token.
     * Temporary Accounts
     * Until the identity is linked with the Rivet Hub (see `PrepareGameLink`), this identity will be temporary but still behave like all other identities.
     * This is intended to allow users to play the game without signing up while still having the benefits of having an account. When they are ready to save their account, they should be instructed to link their account (see `PrepareGameLink`).
     * Storing Token
     * `identity_token` should be stored in some form of persistent storage. The token should be read from storage and passed to `Setup` every time the client starts.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    setup(request?: Rivet.identity.SetupRequest): Promise<Rivet.identity.SetupResponse>;
    /**
     * Fetches an identity profile.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getProfile(identityId: string, request?: Rivet.identity.GetProfileRequest): Promise<Rivet.identity.GetProfileResponse>;
    /**
     * Fetches the current identity's profile.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getSelfProfile(request?: Rivet.identity.GetSelfProfileRequest): Promise<Rivet.identity.GetProfileResponse>;
    /**
     * Fetches a list of identity handles.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getHandles(request: Rivet.identity.GetHandlesRequest): Promise<Rivet.identity.GetHandlesResponse>;
    /**
     * Fetches a list of identity summaries.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getSummaries(request: Rivet.identity.GetSummariesRequest): Promise<Rivet.identity.GetSummariesResponse>;
    /**
     * Updates profile of the current identity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    updateProfile(request?: Rivet.identity.UpdateProfileRequest): Promise<void>;
    /**
     * Validate contents of identity profile. Use to provide immediate feedback on profile changes before committing them.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateProfile(request?: Rivet.identity.ValidateProfileRequest): Promise<void>;
    /**
     * Fuzzy search for identities.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    search(request: Rivet.identity.SearchRequest): Promise<Rivet.identity.SearchResponse>;
    /**
     * Sets the current identity's game activity. This activity will automatically be removed when the identity goes offline.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    setGameActivity(request: Rivet.identity.SetGameActivityRequest): Promise<void>;
    /**
     * Removes the current identity's game activity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    removeGameActivity(): Promise<void>;
    /**
     * Updates the current identity's status.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    updateStatus(request: Rivet.identity.UpdateStatusRequest): Promise<void>;
    /**
     * Follows the given identity. In order for identities to be "friends", the other identity has to also follow this identity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    follow(identityId: string): Promise<void>;
    /**
     * Unfollows the given identity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    unfollow(identityId: string): Promise<void>;
    /**
     * Prepares an avatar image upload. Complete upload with `CompleteIdentityAvatarUpload`.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    prepareAvatarUpload(request: Rivet.identity.PrepareAvatarUploadRequest): Promise<Rivet.identity.PrepareAvatarUploadResponse>;
    /**
     * Completes an avatar image upload. Must be called after the file upload process completes.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    completeAvatarUpload(uploadId: string): Promise<void>;
    /**
     * Completes an avatar image upload. Must be called after the file upload process completes.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    signupForBeta(request: Rivet.identity.SignupForBetaRequest): Promise<void>;
    /**
     * Creates an abuse report for an identity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    report(identityId: string, request?: Rivet.identity.ReportRequest): Promise<void>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listFollowers(identityId: string, request?: Rivet.identity.ListFollowersRequest): Promise<Rivet.identity.ListFollowersResponse>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listFollowing(identityId: string, request?: Rivet.identity.ListFollowingRequest): Promise<Rivet.identity.ListFollowingResponse>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listFriends(request?: Rivet.identity.ListFriendsRequest): Promise<Rivet.identity.ListFriendsResponse>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listMutualFriends(identityId: string, request?: Rivet.identity.ListMutualFriendsRequest): Promise<Rivet.identity.ListMutualFriendsResponse>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listRecentFollowers(request?: Rivet.identity.ListRecentFollowersRequest): Promise<Rivet.identity.ListRecentFollowersResponse>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    ignoreRecentFollower(identityId: string): Promise<void>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    markDeletion(): Promise<void>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    unmarkDeletion(): Promise<void>;
    private _events;
    get events(): Events;
    private _links;
    get links(): Links;
    private _getAuthorizationHeader;
}
