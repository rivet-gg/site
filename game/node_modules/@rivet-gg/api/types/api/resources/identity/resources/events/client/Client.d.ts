/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Rivet } from "../../../../../..";
export declare namespace Events {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Events {
    private readonly options;
    constructor(options: Events.Options);
    /**
     * Returns all events relative to the current identity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    watch(request?: Rivet.identity.WatchEventsRequest): Promise<Rivet.identity.WatchEventsResponse>;
    private _getAuthorizationHeader;
}
