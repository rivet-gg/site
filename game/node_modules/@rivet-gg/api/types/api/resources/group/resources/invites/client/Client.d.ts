/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Rivet } from "../../../../../..";
export declare namespace Invites {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Invites {
    private readonly options;
    constructor(options: Invites.Options);
    /**
     * Inspects a group invite returning information about the team that created it.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getInvite(groupInviteCode: string): Promise<Rivet.group.GetInviteResponse>;
    /**
     * Consumes a group invite to join a group.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    consumeInvite(groupInviteCode: string): Promise<Rivet.group.ConsumeInviteResponse>;
    /**
     * Creates a group invite. Can be shared with other identities to let them join this group.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    createInvite(groupId: string, request: Rivet.group.CreateInviteRequest): Promise<Rivet.group.CreateInviteResponse>;
    private _getAuthorizationHeader;
}
