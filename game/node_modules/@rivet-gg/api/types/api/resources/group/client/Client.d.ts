/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Rivet } from "../../../..";
import { Invites } from "../resources/invites/client/Client";
import { JoinRequests } from "../resources/joinRequests/client/Client";
export declare namespace Group {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Group {
    private readonly options;
    constructor(options: Group.Options);
    /**
     * Returns a list of suggested groups.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    listSuggested(request?: Rivet.group.ListSuggestedRequest): Promise<Rivet.group.ListSuggestedResponse>;
    /**
     * Creates a new group.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    create(request: Rivet.group.CreateRequest): Promise<Rivet.group.CreateResponse>;
    /**
     * Prepares an avatar image upload.
     * Complete upload with `rivet.api.group#CompleteAvatarUpload`.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    prepareAvatarUpload(request: Rivet.group.PrepareAvatarUploadRequest): Promise<Rivet.group.PrepareAvatarUploadResponse>;
    /**
     * Validate contents of group profile. Use to provide immediate feedback on profile changes before committing them.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    validateProfile(request: Rivet.group.ValidateProfileRequest): Promise<Rivet.group.ValidateProfileResponse>;
    /**
     * Fuzzy search for groups.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    search(request: Rivet.group.SearchRequest): Promise<Rivet.group.SearchResponse>;
    /**
     * Completes an avatar image upload. Must be called after the file upload
     * process completes.
     * Call `rivet.api.group#PrepareAvatarUpload` first.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    completeAvatarUpload(groupId: string, uploadId: string): Promise<void>;
    /**
     * Returns a group's bans. Must have valid permissions to view.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getBans(groupId: string, request?: Rivet.group.GetBansRequest): Promise<Rivet.group.GetBansResponse>;
    /**
     * Bans an identity from a group. Must be the owner of the group to perform this action. The banned identity will no longer be able to create a join request or use a group invite.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    banIdentity(groupId: string, identityId: string): Promise<void>;
    /**
     * Unbans an identity from a group. Must be the owner of the group to perform this action.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    unbanIdentity(groupId: string, identityId: string): Promise<void>;
    /**
     * Returns a group's join requests. Must have valid permissions to view.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getJoinRequests(groupId: string, request?: Rivet.group.GetJoinRequestsRequest): Promise<Rivet.group.GetJoinRequestsResponse>;
    /**
     * Kicks an identity from a group. Must be the owner of the group to perform this action.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    kickMember(groupId: string, identityId: string): Promise<void>;
    /**
     * Leaves a group.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    leave(groupId: string): Promise<void>;
    /**
     * Returns a group's members.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getMembers(groupId: string, request?: Rivet.group.GetMembersRequest): Promise<Rivet.group.GetMembersResponse>;
    /**
     * Returns a group profile.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getProfile(groupId: string, request?: Rivet.group.GetProfileRequest): Promise<Rivet.group.GetProfileResponse>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    updateProfile(groupId: string, request: Rivet.group.UpdateProfileRequest): Promise<void>;
    /**
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getSummary(groupId: string): Promise<Rivet.group.GetSummaryResponse>;
    /**
     * Transfers ownership of a group to another identity.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    transferOwnership(groupId: string, request: Rivet.group.TransferOwnershipRequest): Promise<void>;
    private _invites;
    get invites(): Invites;
    private _joinRequests;
    get joinRequests(): JoinRequests;
    private _getAuthorizationHeader;
}
