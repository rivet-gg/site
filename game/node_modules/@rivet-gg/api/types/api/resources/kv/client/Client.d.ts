/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Rivet } from "../../../..";
export declare namespace Kv {
    interface Options {
        environment?: environments.RivetEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Kv {
    private readonly options;
    constructor(options: Kv.Options);
    /**
     * Returns a specific key-value entry by key.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    get(request: Rivet.kv.GetOperationRequest): Promise<Rivet.kv.GetResponse>;
    /**
     * Puts (sets or overwrites) a key-value entry by key.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    put(request: Rivet.kv.PutRequest): Promise<void>;
    /**
     * Deletes a key-value entry by key.
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    delete(request: Rivet.kv.DeleteOperationRequest): Promise<void>;
    /**
     * Gets multiple key-value entries by key(s).
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    getBatch(request: Rivet.kv.GetBatchRequest): Promise<Rivet.kv.GetBatchResponse>;
    /**
     * Puts (sets or overwrites) multiple key-value entries by key(s).
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    putBatch(request: Rivet.kv.PutBatchRequest): Promise<void>;
    /**
     * Deletes multiple key-value entries by key(s).
     * @throws {Rivet.InternalError}
     * @throws {Rivet.RateLimitError}
     * @throws {Rivet.ForbiddenError}
     * @throws {Rivet.UnauthorizedError}
     * @throws {Rivet.NotFoundError}
     * @throws {Rivet.BadRequestError}
     */
    deleteBatch(request: Rivet.kv.DeleteBatchRequest): Promise<void>;
    private _getAuthorizationHeader;
}
